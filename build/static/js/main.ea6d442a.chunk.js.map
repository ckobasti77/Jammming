{"version":3,"sources":["Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","util/Spotify.js","Components/App/App.js","reportWebVitals.js","index.js"],"names":["SearchBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","term","search","bind","assertThisInitialized","handleTermChange","onSearch","event","setState","target","value","react_default","a","createElement","className","placeholder","onChange","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","onAdd","track","onRemove","name","artist","album","renderAction","TrackList","tracks","map","Components_Track_Track","key","id","SearchResults","Components_TrackList_TrackList","searchResults","Playlist","handleNameChange","onNameChange","defaultValue","playlistTracks","onSave","accessToken","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","concat","_search","asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","abrupt","sent","stop","_x","apply","arguments","savePlayList","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris","getCurrentUserId","App","playlistName","updatePlaylistName","savePlaylist","find","savedTrack","push","filter","currentTrack","_this2","_this3","Components_SearchBar_SearchBar","Components_SearchResults_SearchResults","Components_Playlist_Playlist","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","Components_App_App"],"mappings":"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","file":"static/js/main.ea6d442a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./SearchBar.css\";\r\n\r\nclass SearchBar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = { term: '' };\r\n\r\n    this.search = this.search.bind(this);\r\n    this.handleTermChange = this.handleTermChange.bind(this);\r\n  }\r\n\r\n  search(term) {\r\n    this.props.onSearch(this.state.term)\r\n  }\r\n\r\n  handleTermChange(event) {\r\n    this.setState({term: event.target.value})\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"SearchBar\">\r\n        <input placeholder=\"Enter A Song, Album, or Artist\" onChange={this.handleTermChange}/>\r\n        <button className=\"SearchButton\" onClick={this.search}>SEARCH</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBar;\r\n","import React from \"react\";\r\nimport \"./Track.css\";\r\n\r\nclass Track extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.addTrack = this.addTrack.bind(this);\r\n    this.removeTrack = this.removeTrack.bind(this);\r\n  }\r\n  renderAction() {\r\n    if (this.props.isRemoval) {\r\n      return <button className=\"Track-action\" onClick={this.removeTrack}>-</button>;\r\n    } else {\r\n      return <button className=\"Track-action\" onClick={this.addTrack}>+</button>;\r\n    }\r\n  }\r\n  addTrack() {\r\n    this.props.onAdd(this.props.track)\r\n  }\r\n  removeTrack() {\r\n    this.props.onRemove(this.props.track)\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"Track\">\r\n        <div className=\"Track-information\">\r\n          <h3>{this.props.track.name}</h3>\r\n          <p>{this.props.track.artist} | {this.props.track.album}</p>\r\n        </div>\r\n        {this.renderAction()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Track;","import React from \"react\";\r\nimport \"./TrackList.css\";\r\n\r\nimport Track from '../Track/Track';\r\n\r\nclass TrackList extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"TrackList\">\r\n        {\r\n          this.props.tracks.map(track => {\r\n            return <Track track={track}\r\n                          key={track.id} \r\n                          onAdd={this.props.onAdd}\r\n                          onRemove={this.props.onRemove}\r\n                          isRemoval={this.props.isRemoval}/>\r\n          })\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TrackList;","import React from \"react\";\r\nimport \"./SearchResults.css\";\r\n\r\nimport TrackList from \"../TrackList/TrackList\";\r\nimport PlaylistList from \"../PlaylistList/PlaylistList\";\r\n\r\nclass SearchResults extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"SearchResults\">\r\n        <h2>Results</h2>\r\n        <TrackList\r\n          tracks={this.props.searchResults}\r\n          onAdd={this.props.onAdd}\r\n          isRemoval={false}\r\n        />\r\n        {/* <PlaylistList /> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchResults;\r\n","import React from \"react\";\r\nimport \"./Playlist.css\";\r\n\r\nimport TrackList from \"../TrackList/TrackList\";\r\n\r\nclass Playlist extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    \r\n    this.handleNameChange = this.handleNameChange.bind(this);\r\n  }\r\n  handleNameChange(event) {\r\n    this.props.onNameChange(event.target.value);\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"Playlist\">\r\n        <input defaultValue={\"New Playlist\"} onChange={this.handleNameChange} />\r\n        <TrackList\r\n          tracks={this.props.playlistTracks}\r\n          onRemove={this.props.onRemove}\r\n          isRemoval={true}\r\n        />\r\n        <button className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Playlist;\r\n","const clientID = \"6a79621762594eb8a85bdf1ff8a87376\";\r\nconst redirectUri = \"http://localhost:3000\";\r\nlet accessToken;\r\nlet userId;\r\nconst Spotify = {\r\n  /**\r\n   * If there is an access token, return it. If there is not an access token, check the URL to see if\r\n   * there is a match for an access token and expiration time. If there is a match, set the access token\r\n   * equal to the match, set the expiration time, clear the URL parameters, and return the access token.\r\n   * If there is not a match, redirect the user to the access URL.\r\n   * @returns The access token is being returned.\r\n   */\r\n  getAccessToken() {\r\n    if (accessToken) {\r\n      return accessToken;\r\n    }\r\n\r\n    // check for access token match\r\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n\r\n    if (accessTokenMatch && expiresInMatch) {\r\n      accessToken = accessTokenMatch[1];\r\n      const expiresIn = Number(expiresInMatch[1]);\r\n      // This clears the parameters, allowing us to grab a new access token when it expires.\r\n      window.setTimeout(() => (accessToken = \"\"), expiresIn * 1000);\r\n      window.history.pushState(\"Access Token\", null, \"/\");\r\n      return accessToken;\r\n    } else {\r\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\r\n      window.location = accessUrl;\r\n    }\r\n  },\r\n\r\n  \r\n\r\n /**\r\n  * The search function takes in a term, gets the access token, and then returns a promise that fetches\r\n  * the search results from the Spotify API.\r\n  * @param term - the search term we want to pass to the API\r\n  * @returns An array of objects.\r\n  */\r\n  async search(term) {\r\n    const accessToken = Spotify.getAccessToken();\r\n    return await fetch(\r\n      `https://api.spotify.com/v1/search?type=track&q=${term}`,\r\n      {\r\n        headers: {\r\n          Authorization: `Bearer ${accessToken}`,\r\n        },\r\n      }\r\n    )\r\n      .then((response) => {\r\n        return response.json();\r\n      })\r\n      .then((jsonResponse) => {\r\n        if (!jsonResponse.tracks) {\r\n          return [];\r\n        }\r\n        return jsonResponse.tracks.items.map((track) => ({\r\n          id: track.id,\r\n          name: track.name,\r\n          artist: track.artists[0].name,\r\n          album: track.album.name,\r\n          uri: track.uri,\r\n        }));\r\n      });\r\n  },\r\n\r\n  savePlayList(name, trackUris) {\r\n    if (!name || !trackUris.length) {\r\n      return;\r\n    }\r\n    const accessToken = Spotify.getAccessToken();\r\n    const headers = { Authorization: `Bearer ${accessToken}` };\r\n    let userId;\r\n\r\n    return fetch(\"https://api.spotify.com/v1/me\", { headers: headers })\r\n      .then((response) => response.json())\r\n      .then((jsonResponse) => {\r\n        userId = jsonResponse.id;\r\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\r\n          headers: headers,\r\n          method: \"POST\",\r\n          body: JSON.stringify({ name: name }),\r\n        })\r\n          .then((response) => response.json())\r\n          .then((jsonResponse) => {\r\n            const playlistId = jsonResponse.id;\r\n            return fetch(\r\n              `https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`,\r\n              {\r\n                headers: headers,\r\n                method: \"POST\",\r\n                body: JSON.stringify({ uris: trackUris }),\r\n              }\r\n            );\r\n          });\r\n      });\r\n  },\r\n\r\n  // getUserPlaylists() {\r\n  //   return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {headers: headers})\r\n  // },\r\n\r\n  getCurrentUserId() {\r\n    if (userId) {\r\n      return fetch()\r\n    } else {\r\n\r\n    }\r\n  }\r\n};\r\n\r\nexport default Spotify;\r\n","import React from \"react\";\nimport \"./App.css\";\n\nimport SearchBar from \"../SearchBar/SearchBar\";\nimport SearchResults from \"../SearchResults/SearchResults\";\nimport Playlist from \"../Playlist/Playlist\";\n\nimport Spotify from \"../../util/Spotify\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchResults: [],\n      playlistName: \"My Playlist\",\n      playlistTracks: [],\n    };\n    \n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  addTrack(track) {\n    let tracks = this.state.playlistTracks;\n    if (tracks.find((savedTrack) => savedTrack.id === track.id)) {\n      return;\n    }\n\n    tracks.push(track);\n    this.setState({ playlistTracks: tracks });\n  }\n\n  removeTrack(track) {\n    let tracks = this.state.playlistTracks;\n    tracks = tracks.filter((currentTrack) => currentTrack.id !== track.id);\n    this.setState({ playlistTracks: tracks });\n  }\n\n  updatePlaylistName(name) {\n    this.setState({ playlistName: name });\n  }\n\n  savePlaylist() {\n    const trackUris = this.state.playlistTracks.map((track) => track.uri);\n    Spotify.savePlayList(this.state.playlistName, trackUris).then(() => {\n      this.setState({\n        playlistName: \"New Playlist\",\n        playlistTracks: [],\n      });\n    });\n  }\n\n  search(term) {\n    Spotify.search(term).then((searchResults) => {\n      this.setState({ searchResults: searchResults });\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>\n          Ja<span className=\"highlight\">mmm</span>ing\n        </h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search} />\n          <div className=\"App-playlist\">\n            <SearchResults\n              searchResults={this.state.searchResults}\n              onAdd={this.addTrack}\n            />\n            <Playlist\n              playlistName={this.state.playlistName}\n              playlistTracks={this.state.playlistTracks}\n              onRemove={this.removeTrack}\n              onNameChange={this.updatePlaylistName}\n              onSave={this.savePlaylist}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './Components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}